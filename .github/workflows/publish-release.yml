# This is a basic workflow to help you get started with Actions

name: Publish-Release

# Controls when the workflow will run
on:
  push:
    tags:
      - '*.*.*'  # Match anything resembling semver

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  read-tag:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.read-tag.outputs.tag }}
    steps:
      - name: Read tag
        id: read-tag
        shell: bash  # Needed so that variable expansion operators work properly:
        run: |
          echo "tag=${GITHUB_REF:10}" >> $GITHUB_OUTPUT # Export just the tag name, e.g. "0.0.1" instead of "refs/tags/0.0.1" as a step output
#          echo "::set-output name=tag::${GITHUB_REF:10}"  # Export just the tag name, e.g. "0.0.1" instead of "refs/tags/0.0.1" as a step output

  create-release:
    runs-on: ubuntu-latest
    outputs:
      upload-url: ${{ steps.create-release.outputs.upload_url }}
    steps:
      - name: Create release
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

  linux-release:
    runs-on: ubuntu-latest
    needs: [read-tag, create-release]
    env:
      PENNSIEVE_API_KEY: ${{ secrets.PENNSIEVE_API_KEY }}
      PENNSIEVE_SECRET_KEY: ${{ secrets.PENNSIEVE_SECRET_KEY }}
      PRODUCT_NAME: Pennsieve
      PACKAGE_BINARY_NAME: pennsieve-agent
      PS_PATH: /opt/pennsieve
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install dependencies
        id: install-deps
        run: |
          sudo gem install fpm
          eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
          brew install coreutils
      - name: Setup directories
        id: setup-dirs
        run: |
          mkdir -p ~/.pennsieve
          BUILD_DIR=$(mktemp -d)
          mkdir $BUILD_DIR/bin
          echo "BUILD_DIR = $BUILD_DIR"
          echo "build-dir=${{BUILD_DIR}}" >> $GITHUB_OUTPUT
#          echo "::set-output name=build-dir::$BUILD_DIR"
      - name: Read version
        id: read-version
        run: |
          VERSION=${{needs.read-tag.outputs.tag}}
          echo "VERSION = $VERSION"
          echo "version=${{VERSION}}" >> $GITHUB_OUTPUT
#          echo "::set-output name=version::$VERSION"
      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: '1.18.0'
      - name: Install dependencies
        run: |
          go version
          go get -u golang.org/x/lint/golint
      - name: Build release
        id: build-release
        run: |
          VERSION=${{needs.read-tag.outputs.tag}}
          go build -ldflags "-s -X 'github.com/pennsieve/pennsieve-agent/cmd/version.Version=$VERSION' -X 'github.com/pennsieve/pennsieve-agent/pkg/server.Version=$VERSION'"
      - name: Package assets
        id: package-assets
        env:
          BUILD_DIR: ${{ steps.setup-dirs.outputs.build-dir }}
          PS_VERSION: ${{ steps.read-version.outputs.version }}
          PS_EXECUTABLE: ${{ env.PS_PATH }}/bin/${{ env.PACKAGE_BINARY_NAME }}
        run: |
          echo "BUILD_DIR=$BUILD_DIR"
          echo "PS_VERSION=$PS_VERSION"
          echo "PS_EXECUTABLE=$PS_EXECUTABLE"
          echo "asset-file=pennsieve-agent_${{ env.PS_VERSION }}_amd64.deb" >> $GITHUB_OUTPUT
#          echo "::set-output name=asset-file::pennsieve-agent_${{ env.PS_VERSION }}_amd64.deb"
          cp ./${{ env.PACKAGE_BINARY_NAME }} ${{ env.BUILD_DIR }}
          mv ${{ env.BUILD_DIR }}/${{ env.PACKAGE_BINARY_NAME }} ${{ env.BUILD_DIR }}/bin/${{ env.PACKAGE_BINARY_NAME }}
          cp ./resources/config* ${{ env.BUILD_DIR }}
          fpm \
            -f \
            --verbose \
            -s dir \
            -t deb \
            --prefix="${{ env.PS_PATH }}" \
            --url="https://app.pennsieve.io" \
            --deb-no-default-config-files \
            -n "${{ env.PACKAGE_BINARY_NAME }}" \
            --after-install ci/unix/linux_post_install.sh \
            -v ${{ env.PS_VERSION }} \
            --template-scripts \
            --template-value ps_path="${{ env.PS_PATH }}" \
            --template-value ps_version="${{ env.PS_VERSION }}" \
            --template-value ps_release_name="${{ env.PACKAGE_BINARY_NAME }}" \
            --template-value ps_executable="${{ env.PS_EXECUTABLE }}" \
            "${{ env.BUILD_DIR }}/=."
      - name: Publish assets
        id: publish-assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload-url }}
          asset_path: ./${{ steps.package-assets.outputs.asset-file }}
          asset_name: ${{ steps.package-assets.outputs.asset-file }}
          asset_content_type: application/octet-stream

  windows-release:
    runs-on: windows-latest
    needs: [read-tag, create-release]
    defaults:
      run:
        shell: bash
    outputs:
      asset-file: ${{ steps.package-assets.outputs.asset-file }}
    env:
      PENNSIEVE_API_KEY: ${{ secrets.PENNSIEVE_API_KEY }}
      PENNSIEVE_SECRET_KEY: ${{ secrets.PENNSIEVE_SECRET_KEY }}
      PRODUCT_NAME: Pennsieve
      PACKAGE_BINARY_NAME: pennsieve
      WIX_VERSION: 0.0.5
      WIX_TOOLSET_VERSION: 3.11
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install dependencies
        id: install-deps
        run: |
          echo "::debug:: RELEASE: [${{ needs.read-tag.outputs.tag }}]"
      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: '1.18.0'
      - name: Install dependencies
        run: |
          go version
          go get -u golang.org/x/lint/golint
      - name: Build release
        id: build-release
        run: |
          VERSION=${{needs.read-tag.outputs.tag}}
          go build -o pennsieve.exe -ldflags "-s -X 'github.com/pennsieve/pennsieve-agent/cmd/version.Version=$VERSION' -X 'github.com/pennsieve/pennsieve-agent/pkg/server.Version=$VERSION'"
      - name: Set path for candle and light
        run: echo "C:\Program Files (x86)\WiX Toolset v3.11\bin" >> $GITHUB_PATH
        shell: bash
      - name: Package assets
        id: package-assets
        shell: pwsh
        run: |
          echo "::debug:: pwd: " pwd
          echo ":::debug:: " ls
          candle.exe ci\windows\wix\main.wxs -o obj\ -ext WixUtilExtension -ext WixUIExtension -dVersion='1.0.20'           
          light.exe obj\*.wixobj -o pennsieve-${{ needs.read-tag.outputs.tag }}-x86_64.msi -ext WixUtilExtension -ext WixUIExtension
          echo "asset-file=pennsieve-${{ needs.read-tag.outputs.tag }}-x86_64.msi" >> $GITHUB_OUTPUT
#          echo "::set-output name=asset-file::pennsieve-${{ needs.read-tag.outputs.tag }}-x86_64.msi"
      - name: Publish assets
        id: publish-assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload-url }}
          asset_path: ${{ steps.package-assets.outputs.asset-file }}
          asset_name: ${{ steps.package-assets.outputs.asset-file }}
          asset_content_type: application/octet-stream

  mac-release:
    runs-on: macos-latest
    needs: [ read-tag, create-release ]
    env:
      PENNSIEVE_API_KEY: ${{ secrets.PENNSIEVE_API_KEY }}
      PENNSIEVE_SECRET_KEY: ${{ secrets.PENNSIEVE_SECRET_KEY }}
      PRODUCT_NAME: Pennsieve
      PACKAGE_BINARY_NAME: pennsieve
      PS_PATH: /usr/local/opt/pennsieve
      APPLE_IDENTITY: "Developer ID Installer: Joost Wagenaar (5GS9BDM7WS)"
      KEYCHAIN: "pennsieve-agent"
      KEYCHAIN_PASSWORD: "password"
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install dependencies
        id: install-deps
        run: |
          sudo gem install fpm
          brew install coreutils
      - name: Setup directories
        id: setup-dirs
        run: |
          mkdir -p ~/.pennsieve
          BUILD_DIR=$(mktemp -d)
          mkdir $BUILD_DIR/bin
          echo "BUILD_DIR = $BUILD_DIR"
          echo "{build-dir}={$BUILD_DIR} >> $GITHUB_OUTPUT
      - name: Read version
        id: read-version
        run: |
          VERSION=${{needs.read-tag.outputs.tag}}
          echo "VERSION = $VERSION"
          echo "version=${{VERSION}}" >> $GITHUB_OUTPUT
      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: '1.18.0'
      - name: Install dependencies
        run: |
          go version
          go get -u golang.org/x/lint/golint
      - name: Build release
        id: build-release
        run: |
          VERSION=${{needs.read-tag.outputs.tag}}
          go build -ldflags "-s -X 'github.com/pennsieve/pennsieve-agent/cmd/version.Version=$VERSION' -X 'github.com/pennsieve/pennsieve-agent/pkg/server.Version=$VERSION'"
      - name: Package assets
        id: package-assets
        env:
          BUILD_DIR: ${{ steps.setup-dirs.outputs.build-dir }}
          PS_VERSION: ${{ steps.read-version.outputs.version }}
          PS_EXECUTABLE: ${{ env.PS_PATH }}/bin/${{ env.PACKAGE_BINARY_NAME }}
          PACKAGE_FILE: ${{ env.PACKAGE_BINARY_NAME }}-${{ steps.read-version.outputs.version }}.pkg
          UNSIGNED_PACKAGE_FILE: unsigned-${{ env.PACKAGE_BINARY_NAME }}-${{ steps.read-version.outputs.version }}.pkg
        run: |
          echo "BUILD_DIR=$BUILD_DIR"
          echo "PS_VERSION=$PS_VERSION"
          echo "PS_EXECUTABLE=$PS_EXECUTABLE"
          echo "PACKAGE_FILE=$PACKAGE_FILE"
          echo "UNSIGNED_PACKAGE_FILE=$UNSIGNED_PACKAGE_FILE"
          echo "asset-file=${{env.PACKAGE_FILE}} >> $GITHUB_OUTPUT
          echo "unsigned-asset-file=${{ env.UNSIGNED_PACKAGE_FILE }}" >> $GITHUB_OUTPUT
#          echo "::set-output name=unsigned-asset-file::${{ env.UNSIGNED_PACKAGE_FILE }}"
          cp ./${{ env.PACKAGE_BINARY_NAME }} ${{ env.BUILD_DIR }}
          mv ${{ env.BUILD_DIR }}/${{ env.PACKAGE_BINARY_NAME }} ${{ env.BUILD_DIR }}/bin/${{ env.PACKAGE_BINARY_NAME }}
          cp ./resources/config* ${{ env.BUILD_DIR }}
          fpm \
            -f \
            --verbose \
            -s dir \
            -t osxpkg \
            --url="https://app.pennsieve.io" \
            --osxpkg-identifier-prefix io.pennsieve \
            -n "${{ env.PACKAGE_BINARY_NAME }}" \
            --after-install ci/unix/mac_post_install.sh \
            -v ${{ env.PS_VERSION }} \
            --template-scripts \
            --template-value ps_path=/usr/local/opt/pennsieve \
            --template-value ps_version="${{ env.PS_VERSION }}" \
            --template-value ps_release_name=pennsieve \
            --template-value ps_executable=/usr/local/opt/pennsieve/pennsieve \
            pennsieve=/usr/local/opt/pennsieve/pennsieve
            echo "Renaming ${{ env.PACKAGE_FILE }} > ${{ env.UNSIGNED_PACKAGE_FILE }}"
            mv ${{ env.PACKAGE_FILE }} ${{ env.UNSIGNED_PACKAGE_FILE }}
      - name: Sign assets
        id: sign-assets
        env:
          APPLE_CERTIFICATE_FILE: "PennsieveDeveloperCert.p12"
        shell: bash
        run: |
          # Decode and dump the base64 encoded contents of the Apple Developer certificate into a file:
          # (output in the log will be masked)
          echo "${{ secrets.APPLE_CERTIFICATE_P12_BASE64 }}" | base64 --decode > "${{ env.APPLE_CERTIFICATE_FILE }}"
          
          # Remove the keychain if it exists:
          security delete-keychain "${{ env.KEYCHAIN }}" || true
          
          # We do not have access to the system keychain on GitHub Actions, so
          # we have to create a temporary keychain to hold the cert
          security create-keychain -p "${{ env.KEYCHAIN_PASSWORD }}" "${{ env.KEYCHAIN }}"
          security unlock-keychain -p "${{ env.KEYCHAIN_PASSWORD }}" "${{ env.KEYCHAIN }}"
          security import "${{ env.APPLE_CERTIFICATE_FILE }}" -k "${{ env.KEYCHAIN }}" -P "${{ secrets.APPLE_CERTIFICATE_PASSWORD }}" -T /usr/bin/productsign
          
          # Set the access control for our certificate so that keychain does
          # not prompt for the certificate password when used. See:
          # https://apple.stackexchange.com/a/285320
          # https://stackoverflow.com/a/40039594
          # https://www.jamf.com/jamf-nation/discussions/22304/yet-another-keychain-security-command-line-tool-question
          security set-key-partition-list -S apple-tool:,apple: -k "${{ env.KEYCHAIN_PASSWORD }}" -D "${{ env.APPLE_IDENTITY }}" -t private "${{ env.KEYCHAIN }}"
          
          sudo productsign --keychain "${{ env.KEYCHAIN }}" --sign "${{ env.APPLE_IDENTITY }}" "${{ steps.package-assets.outputs.unsigned-asset-file }}" "${{ steps.package-assets.outputs.asset-file }}"
          
          # Sanity check
          # pkgutil --check-signature "${{ steps.package-assets.outputs.asset-file }}" || exit 1
      - name: Publish assets
        id: publish-assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload-url }}
          asset_path: ./${{ steps.package-assets.outputs.asset-file }}
          asset_name: ${{ steps.package-assets.outputs.asset-file }}
          asset_content_type: application/octet-stream

