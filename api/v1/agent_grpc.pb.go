// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: api/v1/agent.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AgentClient is the client API for Agent service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AgentClient interface {
	// Manifest Endpoints
	CreateManifest(ctx context.Context, in *CreateManifestRequest, opts ...grpc.CallOption) (*CreateManifestResponse, error)
	AddToManifest(ctx context.Context, in *AddToManifestRequest, opts ...grpc.CallOption) (*SimpleStatusResponse, error)
	RemoveFromManifest(ctx context.Context, in *RemoveFromManifestRequest, opts ...grpc.CallOption) (*SimpleStatusResponse, error)
	DeleteManifest(ctx context.Context, in *DeleteManifestRequest, opts ...grpc.CallOption) (*SimpleStatusResponse, error)
	ListManifests(ctx context.Context, in *ListManifestsRequest, opts ...grpc.CallOption) (*ListManifestsResponse, error)
	ListManifestFiles(ctx context.Context, in *ListManifestFilesRequest, opts ...grpc.CallOption) (*ListManifestFilesResponse, error)
	RelocateManifestFiles(ctx context.Context, in *RelocateManifestFilesRequest, opts ...grpc.CallOption) (*SimpleStatusResponse, error)
	SyncManifest(ctx context.Context, in *SyncManifestRequest, opts ...grpc.CallOption) (*SyncManifestResponse, error)
	ResetManifest(ctx context.Context, in *ResetManifestRequest, opts ...grpc.CallOption) (*SimpleStatusResponse, error)
	// Upload Endpoints
	UploadManifest(ctx context.Context, in *UploadManifestRequest, opts ...grpc.CallOption) (*SimpleStatusResponse, error)
	CancelUpload(ctx context.Context, in *CancelUploadRequest, opts ...grpc.CallOption) (*SimpleStatusResponse, error)
	// Download and Map Endpoints
	Download(ctx context.Context, in *DownloadRequest, opts ...grpc.CallOption) (*DownloadResponse, error)
	CancelDownload(ctx context.Context, in *CancelDownloadRequest, opts ...grpc.CallOption) (*SimpleStatusResponse, error)
	Map(ctx context.Context, in *MapRequest, opts ...grpc.CallOption) (*SimpleStatusResponse, error)
	Pull(ctx context.Context, in *PullRequest, opts ...grpc.CallOption) (*SimpleStatusResponse, error)
	GetMapDiff(ctx context.Context, in *MapDiffRequest, opts ...grpc.CallOption) (*MapDiffResponse, error)
	Unload(ctx context.Context, in *UnloadRequest, opts ...grpc.CallOption) (*SimpleStatusResponse, error)
	// Server Endpoints
	Version(ctx context.Context, in *VersionRequest, opts ...grpc.CallOption) (*VersionResponse, error)
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (Agent_SubscribeClient, error)
	Unsubscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (*SubscribeResponse, error)
	Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopResponse, error)
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	// User Endpoints
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*UserResponse, error)
	SwitchProfile(ctx context.Context, in *SwitchProfileRequest, opts ...grpc.CallOption) (*UserResponse, error)
	ReAuthenticate(ctx context.Context, in *ReAuthenticateRequest, opts ...grpc.CallOption) (*UserResponse, error)
	// Datasets Endpoints
	UseDataset(ctx context.Context, in *UseDatasetRequest, opts ...grpc.CallOption) (*UseDatasetResponse, error)
	//Workflow Endpoints
	StartWorkflow(ctx context.Context, in *StartWorkflowRequest, opts ...grpc.CallOption) (*WorkflowResponse, error)
	// Account Endpoints
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
}

type agentClient struct {
	cc grpc.ClientConnInterface
}

func NewAgentClient(cc grpc.ClientConnInterface) AgentClient {
	return &agentClient{cc}
}

func (c *agentClient) CreateManifest(ctx context.Context, in *CreateManifestRequest, opts ...grpc.CallOption) (*CreateManifestResponse, error) {
	out := new(CreateManifestResponse)
	err := c.cc.Invoke(ctx, "/v1.Agent/CreateManifest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) AddToManifest(ctx context.Context, in *AddToManifestRequest, opts ...grpc.CallOption) (*SimpleStatusResponse, error) {
	out := new(SimpleStatusResponse)
	err := c.cc.Invoke(ctx, "/v1.Agent/AddToManifest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) RemoveFromManifest(ctx context.Context, in *RemoveFromManifestRequest, opts ...grpc.CallOption) (*SimpleStatusResponse, error) {
	out := new(SimpleStatusResponse)
	err := c.cc.Invoke(ctx, "/v1.Agent/RemoveFromManifest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) DeleteManifest(ctx context.Context, in *DeleteManifestRequest, opts ...grpc.CallOption) (*SimpleStatusResponse, error) {
	out := new(SimpleStatusResponse)
	err := c.cc.Invoke(ctx, "/v1.Agent/DeleteManifest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) ListManifests(ctx context.Context, in *ListManifestsRequest, opts ...grpc.CallOption) (*ListManifestsResponse, error) {
	out := new(ListManifestsResponse)
	err := c.cc.Invoke(ctx, "/v1.Agent/ListManifests", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) ListManifestFiles(ctx context.Context, in *ListManifestFilesRequest, opts ...grpc.CallOption) (*ListManifestFilesResponse, error) {
	out := new(ListManifestFilesResponse)
	err := c.cc.Invoke(ctx, "/v1.Agent/ListManifestFiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) RelocateManifestFiles(ctx context.Context, in *RelocateManifestFilesRequest, opts ...grpc.CallOption) (*SimpleStatusResponse, error) {
	out := new(SimpleStatusResponse)
	err := c.cc.Invoke(ctx, "/v1.Agent/RelocateManifestFiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) SyncManifest(ctx context.Context, in *SyncManifestRequest, opts ...grpc.CallOption) (*SyncManifestResponse, error) {
	out := new(SyncManifestResponse)
	err := c.cc.Invoke(ctx, "/v1.Agent/SyncManifest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) ResetManifest(ctx context.Context, in *ResetManifestRequest, opts ...grpc.CallOption) (*SimpleStatusResponse, error) {
	out := new(SimpleStatusResponse)
	err := c.cc.Invoke(ctx, "/v1.Agent/ResetManifest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) UploadManifest(ctx context.Context, in *UploadManifestRequest, opts ...grpc.CallOption) (*SimpleStatusResponse, error) {
	out := new(SimpleStatusResponse)
	err := c.cc.Invoke(ctx, "/v1.Agent/UploadManifest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) CancelUpload(ctx context.Context, in *CancelUploadRequest, opts ...grpc.CallOption) (*SimpleStatusResponse, error) {
	out := new(SimpleStatusResponse)
	err := c.cc.Invoke(ctx, "/v1.Agent/CancelUpload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) Download(ctx context.Context, in *DownloadRequest, opts ...grpc.CallOption) (*DownloadResponse, error) {
	out := new(DownloadResponse)
	err := c.cc.Invoke(ctx, "/v1.Agent/Download", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) CancelDownload(ctx context.Context, in *CancelDownloadRequest, opts ...grpc.CallOption) (*SimpleStatusResponse, error) {
	out := new(SimpleStatusResponse)
	err := c.cc.Invoke(ctx, "/v1.Agent/CancelDownload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) Map(ctx context.Context, in *MapRequest, opts ...grpc.CallOption) (*SimpleStatusResponse, error) {
	out := new(SimpleStatusResponse)
	err := c.cc.Invoke(ctx, "/v1.Agent/Map", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) Pull(ctx context.Context, in *PullRequest, opts ...grpc.CallOption) (*SimpleStatusResponse, error) {
	out := new(SimpleStatusResponse)
	err := c.cc.Invoke(ctx, "/v1.Agent/Pull", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) GetMapDiff(ctx context.Context, in *MapDiffRequest, opts ...grpc.CallOption) (*MapDiffResponse, error) {
	out := new(MapDiffResponse)
	err := c.cc.Invoke(ctx, "/v1.Agent/GetMapDiff", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) Unload(ctx context.Context, in *UnloadRequest, opts ...grpc.CallOption) (*SimpleStatusResponse, error) {
	out := new(SimpleStatusResponse)
	err := c.cc.Invoke(ctx, "/v1.Agent/Unload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) Version(ctx context.Context, in *VersionRequest, opts ...grpc.CallOption) (*VersionResponse, error) {
	out := new(VersionResponse)
	err := c.cc.Invoke(ctx, "/v1.Agent/Version", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (Agent_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &Agent_ServiceDesc.Streams[0], "/v1.Agent/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &agentSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Agent_SubscribeClient interface {
	Recv() (*SubscribeResponse, error)
	grpc.ClientStream
}

type agentSubscribeClient struct {
	grpc.ClientStream
}

func (x *agentSubscribeClient) Recv() (*SubscribeResponse, error) {
	m := new(SubscribeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *agentClient) Unsubscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (*SubscribeResponse, error) {
	out := new(SubscribeResponse)
	err := c.cc.Invoke(ctx, "/v1.Agent/Unsubscribe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopResponse, error) {
	out := new(StopResponse)
	err := c.cc.Invoke(ctx, "/v1.Agent/Stop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, "/v1.Agent/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, "/v1.Agent/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) SwitchProfile(ctx context.Context, in *SwitchProfileRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, "/v1.Agent/SwitchProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) ReAuthenticate(ctx context.Context, in *ReAuthenticateRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, "/v1.Agent/ReAuthenticate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) UseDataset(ctx context.Context, in *UseDatasetRequest, opts ...grpc.CallOption) (*UseDatasetResponse, error) {
	out := new(UseDatasetResponse)
	err := c.cc.Invoke(ctx, "/v1.Agent/UseDataset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) StartWorkflow(ctx context.Context, in *StartWorkflowRequest, opts ...grpc.CallOption) (*WorkflowResponse, error) {
	out := new(WorkflowResponse)
	err := c.cc.Invoke(ctx, "/v1.Agent/StartWorkflow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, "/v1.Agent/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AgentServer is the server API for Agent service.
// All implementations must embed UnimplementedAgentServer
// for forward compatibility
type AgentServer interface {
	// Manifest Endpoints
	CreateManifest(context.Context, *CreateManifestRequest) (*CreateManifestResponse, error)
	AddToManifest(context.Context, *AddToManifestRequest) (*SimpleStatusResponse, error)
	RemoveFromManifest(context.Context, *RemoveFromManifestRequest) (*SimpleStatusResponse, error)
	DeleteManifest(context.Context, *DeleteManifestRequest) (*SimpleStatusResponse, error)
	ListManifests(context.Context, *ListManifestsRequest) (*ListManifestsResponse, error)
	ListManifestFiles(context.Context, *ListManifestFilesRequest) (*ListManifestFilesResponse, error)
	RelocateManifestFiles(context.Context, *RelocateManifestFilesRequest) (*SimpleStatusResponse, error)
	SyncManifest(context.Context, *SyncManifestRequest) (*SyncManifestResponse, error)
	ResetManifest(context.Context, *ResetManifestRequest) (*SimpleStatusResponse, error)
	// Upload Endpoints
	UploadManifest(context.Context, *UploadManifestRequest) (*SimpleStatusResponse, error)
	CancelUpload(context.Context, *CancelUploadRequest) (*SimpleStatusResponse, error)
	// Download and Map Endpoints
	Download(context.Context, *DownloadRequest) (*DownloadResponse, error)
	CancelDownload(context.Context, *CancelDownloadRequest) (*SimpleStatusResponse, error)
	Map(context.Context, *MapRequest) (*SimpleStatusResponse, error)
	Pull(context.Context, *PullRequest) (*SimpleStatusResponse, error)
	GetMapDiff(context.Context, *MapDiffRequest) (*MapDiffResponse, error)
	Unload(context.Context, *UnloadRequest) (*SimpleStatusResponse, error)
	// Server Endpoints
	Version(context.Context, *VersionRequest) (*VersionResponse, error)
	Subscribe(*SubscribeRequest, Agent_SubscribeServer) error
	Unsubscribe(context.Context, *SubscribeRequest) (*SubscribeResponse, error)
	Stop(context.Context, *StopRequest) (*StopResponse, error)
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	// User Endpoints
	GetUser(context.Context, *GetUserRequest) (*UserResponse, error)
	SwitchProfile(context.Context, *SwitchProfileRequest) (*UserResponse, error)
	ReAuthenticate(context.Context, *ReAuthenticateRequest) (*UserResponse, error)
	// Datasets Endpoints
	UseDataset(context.Context, *UseDatasetRequest) (*UseDatasetResponse, error)
	//Workflow Endpoints
	StartWorkflow(context.Context, *StartWorkflowRequest) (*WorkflowResponse, error)
	// Account Endpoints
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	mustEmbedUnimplementedAgentServer()
}

// UnimplementedAgentServer must be embedded to have forward compatible implementations.
type UnimplementedAgentServer struct {
}

func (UnimplementedAgentServer) CreateManifest(context.Context, *CreateManifestRequest) (*CreateManifestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateManifest not implemented")
}
func (UnimplementedAgentServer) AddToManifest(context.Context, *AddToManifestRequest) (*SimpleStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddToManifest not implemented")
}
func (UnimplementedAgentServer) RemoveFromManifest(context.Context, *RemoveFromManifestRequest) (*SimpleStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFromManifest not implemented")
}
func (UnimplementedAgentServer) DeleteManifest(context.Context, *DeleteManifestRequest) (*SimpleStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteManifest not implemented")
}
func (UnimplementedAgentServer) ListManifests(context.Context, *ListManifestsRequest) (*ListManifestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListManifests not implemented")
}
func (UnimplementedAgentServer) ListManifestFiles(context.Context, *ListManifestFilesRequest) (*ListManifestFilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListManifestFiles not implemented")
}
func (UnimplementedAgentServer) RelocateManifestFiles(context.Context, *RelocateManifestFilesRequest) (*SimpleStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RelocateManifestFiles not implemented")
}
func (UnimplementedAgentServer) SyncManifest(context.Context, *SyncManifestRequest) (*SyncManifestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncManifest not implemented")
}
func (UnimplementedAgentServer) ResetManifest(context.Context, *ResetManifestRequest) (*SimpleStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetManifest not implemented")
}
func (UnimplementedAgentServer) UploadManifest(context.Context, *UploadManifestRequest) (*SimpleStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadManifest not implemented")
}
func (UnimplementedAgentServer) CancelUpload(context.Context, *CancelUploadRequest) (*SimpleStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelUpload not implemented")
}
func (UnimplementedAgentServer) Download(context.Context, *DownloadRequest) (*DownloadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Download not implemented")
}
func (UnimplementedAgentServer) CancelDownload(context.Context, *CancelDownloadRequest) (*SimpleStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelDownload not implemented")
}
func (UnimplementedAgentServer) Map(context.Context, *MapRequest) (*SimpleStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Map not implemented")
}
func (UnimplementedAgentServer) Pull(context.Context, *PullRequest) (*SimpleStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pull not implemented")
}
func (UnimplementedAgentServer) GetMapDiff(context.Context, *MapDiffRequest) (*MapDiffResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMapDiff not implemented")
}
func (UnimplementedAgentServer) Unload(context.Context, *UnloadRequest) (*SimpleStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unload not implemented")
}
func (UnimplementedAgentServer) Version(context.Context, *VersionRequest) (*VersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Version not implemented")
}
func (UnimplementedAgentServer) Subscribe(*SubscribeRequest, Agent_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedAgentServer) Unsubscribe(context.Context, *SubscribeRequest) (*SubscribeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unsubscribe not implemented")
}
func (UnimplementedAgentServer) Stop(context.Context, *StopRequest) (*StopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (UnimplementedAgentServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedAgentServer) GetUser(context.Context, *GetUserRequest) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedAgentServer) SwitchProfile(context.Context, *SwitchProfileRequest) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SwitchProfile not implemented")
}
func (UnimplementedAgentServer) ReAuthenticate(context.Context, *ReAuthenticateRequest) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReAuthenticate not implemented")
}
func (UnimplementedAgentServer) UseDataset(context.Context, *UseDatasetRequest) (*UseDatasetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UseDataset not implemented")
}
func (UnimplementedAgentServer) StartWorkflow(context.Context, *StartWorkflowRequest) (*WorkflowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartWorkflow not implemented")
}
func (UnimplementedAgentServer) Register(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedAgentServer) mustEmbedUnimplementedAgentServer() {}

// UnsafeAgentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AgentServer will
// result in compilation errors.
type UnsafeAgentServer interface {
	mustEmbedUnimplementedAgentServer()
}

func RegisterAgentServer(s grpc.ServiceRegistrar, srv AgentServer) {
	s.RegisterService(&Agent_ServiceDesc, srv)
}

func _Agent_CreateManifest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateManifestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).CreateManifest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.Agent/CreateManifest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).CreateManifest(ctx, req.(*CreateManifestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_AddToManifest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddToManifestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).AddToManifest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.Agent/AddToManifest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).AddToManifest(ctx, req.(*AddToManifestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_RemoveFromManifest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveFromManifestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).RemoveFromManifest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.Agent/RemoveFromManifest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).RemoveFromManifest(ctx, req.(*RemoveFromManifestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_DeleteManifest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteManifestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).DeleteManifest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.Agent/DeleteManifest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).DeleteManifest(ctx, req.(*DeleteManifestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_ListManifests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListManifestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).ListManifests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.Agent/ListManifests",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).ListManifests(ctx, req.(*ListManifestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_ListManifestFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListManifestFilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).ListManifestFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.Agent/ListManifestFiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).ListManifestFiles(ctx, req.(*ListManifestFilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_RelocateManifestFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelocateManifestFilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).RelocateManifestFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.Agent/RelocateManifestFiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).RelocateManifestFiles(ctx, req.(*RelocateManifestFilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_SyncManifest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncManifestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).SyncManifest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.Agent/SyncManifest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).SyncManifest(ctx, req.(*SyncManifestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_ResetManifest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetManifestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).ResetManifest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.Agent/ResetManifest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).ResetManifest(ctx, req.(*ResetManifestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_UploadManifest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadManifestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).UploadManifest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.Agent/UploadManifest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).UploadManifest(ctx, req.(*UploadManifestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_CancelUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelUploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).CancelUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.Agent/CancelUpload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).CancelUpload(ctx, req.(*CancelUploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_Download_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).Download(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.Agent/Download",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).Download(ctx, req.(*DownloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_CancelDownload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelDownloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).CancelDownload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.Agent/CancelDownload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).CancelDownload(ctx, req.(*CancelDownloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_Map_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).Map(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.Agent/Map",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).Map(ctx, req.(*MapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_Pull_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PullRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).Pull(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.Agent/Pull",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).Pull(ctx, req.(*PullRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_GetMapDiff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MapDiffRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).GetMapDiff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.Agent/GetMapDiff",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).GetMapDiff(ctx, req.(*MapDiffRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_Unload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).Unload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.Agent/Unload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).Unload(ctx, req.(*UnloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.Agent/Version",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).Version(ctx, req.(*VersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AgentServer).Subscribe(m, &agentSubscribeServer{stream})
}

type Agent_SubscribeServer interface {
	Send(*SubscribeResponse) error
	grpc.ServerStream
}

type agentSubscribeServer struct {
	grpc.ServerStream
}

func (x *agentSubscribeServer) Send(m *SubscribeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Agent_Unsubscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).Unsubscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.Agent/Unsubscribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).Unsubscribe(ctx, req.(*SubscribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.Agent/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).Stop(ctx, req.(*StopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.Agent/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.Agent/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_SwitchProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SwitchProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).SwitchProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.Agent/SwitchProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).SwitchProfile(ctx, req.(*SwitchProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_ReAuthenticate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReAuthenticateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).ReAuthenticate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.Agent/ReAuthenticate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).ReAuthenticate(ctx, req.(*ReAuthenticateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_UseDataset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UseDatasetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).UseDataset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.Agent/UseDataset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).UseDataset(ctx, req.(*UseDatasetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_StartWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartWorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).StartWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.Agent/StartWorkflow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).StartWorkflow(ctx, req.(*StartWorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.Agent/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Agent_ServiceDesc is the grpc.ServiceDesc for Agent service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Agent_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.Agent",
	HandlerType: (*AgentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateManifest",
			Handler:    _Agent_CreateManifest_Handler,
		},
		{
			MethodName: "AddToManifest",
			Handler:    _Agent_AddToManifest_Handler,
		},
		{
			MethodName: "RemoveFromManifest",
			Handler:    _Agent_RemoveFromManifest_Handler,
		},
		{
			MethodName: "DeleteManifest",
			Handler:    _Agent_DeleteManifest_Handler,
		},
		{
			MethodName: "ListManifests",
			Handler:    _Agent_ListManifests_Handler,
		},
		{
			MethodName: "ListManifestFiles",
			Handler:    _Agent_ListManifestFiles_Handler,
		},
		{
			MethodName: "RelocateManifestFiles",
			Handler:    _Agent_RelocateManifestFiles_Handler,
		},
		{
			MethodName: "SyncManifest",
			Handler:    _Agent_SyncManifest_Handler,
		},
		{
			MethodName: "ResetManifest",
			Handler:    _Agent_ResetManifest_Handler,
		},
		{
			MethodName: "UploadManifest",
			Handler:    _Agent_UploadManifest_Handler,
		},
		{
			MethodName: "CancelUpload",
			Handler:    _Agent_CancelUpload_Handler,
		},
		{
			MethodName: "Download",
			Handler:    _Agent_Download_Handler,
		},
		{
			MethodName: "CancelDownload",
			Handler:    _Agent_CancelDownload_Handler,
		},
		{
			MethodName: "Map",
			Handler:    _Agent_Map_Handler,
		},
		{
			MethodName: "Pull",
			Handler:    _Agent_Pull_Handler,
		},
		{
			MethodName: "GetMapDiff",
			Handler:    _Agent_GetMapDiff_Handler,
		},
		{
			MethodName: "Unload",
			Handler:    _Agent_Unload_Handler,
		},
		{
			MethodName: "Version",
			Handler:    _Agent_Version_Handler,
		},
		{
			MethodName: "Unsubscribe",
			Handler:    _Agent_Unsubscribe_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _Agent_Stop_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _Agent_Ping_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _Agent_GetUser_Handler,
		},
		{
			MethodName: "SwitchProfile",
			Handler:    _Agent_SwitchProfile_Handler,
		},
		{
			MethodName: "ReAuthenticate",
			Handler:    _Agent_ReAuthenticate_Handler,
		},
		{
			MethodName: "UseDataset",
			Handler:    _Agent_UseDataset_Handler,
		},
		{
			MethodName: "StartWorkflow",
			Handler:    _Agent_StartWorkflow_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _Agent_Register_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _Agent_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/v1/agent.proto",
}
